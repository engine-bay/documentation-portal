{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"EngineBay","text":"<p>todo</p>"},{"location":"roadmap.html","title":"Roadmap","text":"<p>The following roadmap is planned, however, this is likely to change as development progresses.</p> <ul> <li> Phase 0 - MVP (in progress)</li> <li> Phase 1 - Rigour</li> <li> Phase 2 - Security</li> <li> Phase 3 - Governance</li> <li> Phase 4 - Observability</li> <li> Phase 5 - Scale</li> <li> Phase 6 - Speed</li> <li> Phase 7 - Features</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-0-mvp","title":"Phase 0 - MVP","text":"<p>A Minimal Viable Product (MVP). Quite simply trying to see if we can get this thing to work.</p> <ul> <li> Module framework</li> <li> Core module</li> <li> Module template</li> <li> Demo module</li> <li> Maintenance framework</li> <li> CI/CD framework</li> <li> Authentication</li> <li> Basic Auth</li> <li> Actor Engine module</li> <li> Blueprints Module</li> <li> Sheet Functions Module</li> <li> Administration portal module</li> <li> Documentation portal module</li> <li> API framework</li> <li> CORS Module</li> <li> API Configuration module</li> <li> Feature Toggles module</li> <li> Multiple database providers</li> <li> Persistence module</li> <li> Database management module</li> <li> Postgres</li> <li> SQLServer</li> <li> SQLite</li> <li> InMemory</li> <li> Migrations framework</li> <li> File Loader</li> <li> JSON format workbooks</li> <li> Excel files</li> <li> Documentation</li> <li> Getting started</li> <li> Configuration</li> <li> OpenAPI 3.0 document generation</li> <li> API Reference</li> <li> Use cases</li> <li> Examples</li> <li> Community Edition</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-1-rigour","title":"Phase 1 - Rigour","text":"<ul> <li> Blueprints E2E tests module</li> <li> Database providers E2E tests framework</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-2-security","title":"Phase 2 - Security","text":"<ul> <li> Authentication</li> <li> Basic Auth</li> <li> JWT Bearer Auth</li> <li> OIDC Auth</li> <li> Single Sign On</li> <li> Column Encryption</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-3-governance","title":"Phase 3 - Governance","text":"<ul> <li> Auditing module</li> <li> Entity change tracking</li> <li> Auditing retention module</li> <li> Changelogs</li> <li> Contribution guidelines</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-4-observability","title":"Phase 4 - Observability","text":"<ul> <li> Telemetry module</li> <li> Performance metrics</li> <li> Distributed tracing</li> <li> Logging Module</li> <li> Configurable logging</li> <li> Logging framework</li> <li> Consistent logging</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-5-scale","title":"Phase 5 - Scale","text":"<ul> <li> Stress testing frameworks</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-6-speed","title":"Phase 6 - Speed","text":"<ul> <li> Optimization module</li> <li> Rate limiting module</li> <li> Startup speed (pre-compiled EF models)</li> <li> Minimal runtime artefact</li> </ul>","tags":["Roadmap","Features"]},{"location":"roadmap.html#phase-7-features","title":"Phase 7 - Features","text":"<ul> <li> Sessions module</li> </ul>","tags":["Roadmap","Features"]},{"location":"tags.html","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags.html#about","title":"About","text":"<ul> <li>About</li> </ul>"},{"location":"tags.html#architecture-decision-record","title":"Architecture Decision Record","text":"<ul> <li>Actor model</li> <li>CQRS</li> <li>Expression Engine</li> <li>Multiple Database Providers</li> <li>Plugin model</li> <li>Proto.actor</li> </ul>"},{"location":"tags.html#blueprints","title":"Blueprints","text":"<ul> <li>Blueprints</li> <li>Data Variable Blueprints</li> <li>Expression Blueprints</li> <li>Trigger Blueprints</li> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#configuration","title":"Configuration","text":"<ul> <li>Configuration</li> <li>Environment Variables</li> <li>Seed Data</li> </ul>"},{"location":"tags.html#data-variable-blueprints","title":"Data Variable Blueprints","text":"<ul> <li>Data Variable Blueprints</li> </ul>"},{"location":"tags.html#data-variables","title":"Data Variables","text":"<ul> <li>Data Variables</li> <li>Data Variable Blueprints</li> </ul>"},{"location":"tags.html#environment-variables","title":"Environment Variables","text":"<ul> <li>Environment Variables</li> </ul>"},{"location":"tags.html#expressions","title":"Expressions","text":"<ul> <li>Expressions</li> <li>Expression Blueprints</li> </ul>"},{"location":"tags.html#expressions-blueprint","title":"Expressions Blueprint","text":"<ul> <li>Expression Blueprints</li> </ul>"},{"location":"tags.html#features","title":"Features","text":"<ul> <li>Roadmap</li> </ul>"},{"location":"tags.html#roadmap","title":"Roadmap","text":"<ul> <li>Roadmap</li> </ul>"},{"location":"tags.html#seed-data","title":"Seed Data","text":"<ul> <li>Seed Data</li> </ul>"},{"location":"tags.html#trigger","title":"Trigger","text":"<ul> <li>Triggers</li> <li>Trigger Blueprints</li> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#trigger-blueprint","title":"Trigger Blueprint","text":"<ul> <li>Trigger Blueprints</li> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#trigger-expression-blueprint","title":"Trigger Expression Blueprint","text":"<ul> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#workbooks","title":"Workbooks","text":"<ul> <li>Workbooks</li> </ul>"},{"location":"about/index.html","title":"About","text":"<p>EngineBay is a rules and calculations engine based on the Actor Model. It was developed with a focus on enabling flexible configuration with fast evaluation.</p> <p>EngineBay is:</p> <p>Simple -- but not simplistic. Flexible -- EngineBay adopts the principle of progressive disclosure of complexity: simple models should be quick and easy, while arbitrarily advanced modules should be possible.</p>","tags":["About"]},{"location":"about/license.html","title":"MIT License","text":"<p>Copyright (c) 2023 EngineBay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/architecture-decision-records/actor-model.html","title":"Actor model","text":"","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/actor-model.html#date","title":"Date","text":"<p>3 January 2023</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/actor-model.html#what-is-this-about","title":"What is this about?","text":"<p>This ADR captures some of the thinking around basing a rules engine on the actor model.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/actor-model.html#whats-the-gist-of-an-actor-model-based-rules-engine","title":"What's the gist of an actor model based rules engine?","text":"<p>If we think about a rules engine being a simple set of inputs being processed to produce and outputs; in the actor model, each input, process, and output is an independent actor. Each actor sends messages to other actors to do things.</p> <p>For example, and input informing a process of a change in it's value, or a process updating an output with the result of the process.</p> <p>Many cohesive actors could model systems, I.e. business rules, at a tantalizingly extreme level of complexity and scale.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/actor-model.html#should-we-even-build-another-rules-engine","title":"Should we even build another rules engine?","text":"<p>Uncle bob's article on rules engines was read (and re-read) to appropriately demotivate us on the value of a rules engine. The dream of non technical users defining business rules independently in a low code / no code fashion that are production ready is lovely. But it's just a dream. The real world is that rules engines take a lot of hard work and discipline across the business (technical and non-technical) to get it right.</p> <p>The success of rule engines in the business context is more about the people, teams and collaboration with subject matter experts. It's about the user experience and workflow. It's about integration with the rest of the business.</p> <p>In the right context, a crude \"rules engine\" comprised of some hard coded if statements running in a loop is more valuable to business thn the most elegant, performant and flexible rules engine possibly conceivable to mankind.</p> <p>So, I'm short: no we should not build another rules engine.</p> <p>But...</p> <p>Gosh darn it!\u2026 doesn't the idea of an actor model based rules engine just sound interesting?</p> <p>Let's just build it anyway to see if we can.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/actor-model.html#considerations","title":"Considerations","text":"<p>Spreadsheets were a source of inspiration. Spreadsheets are kind of like an actor model; each cell interacts with other cells in the spreadsheet to perform calculations or hold values.</p> <p>Love them or hate them, we believe that businesses get immense value out of simple spread sheet models. Most of the time, a spreadsheet it good enough for most business activities (especially to start with). The can store and track data, calculate things, and are relatively intuitive.</p> <p>Spread sheets can also scale in complexity, far beyond what us mere humans can actually cope with. Each of us will have dealt with some legacy super spreadsheet at some point in time. (You know, the one in that shared folder that you should never edit because no-one knows how it works, but the entire business depends on?)</p> <p>How many times have software engineers had to reverse engineer a spreadsheet and systematize it so that the business can have a \"system\" for their business activities rather than some spreadsheet. The very process of systematization changes the behavior of the model, normally for the better, but frustrates business because it's no longer the same. All they really wanted was to take their spreadsheet and run it on a web server somewhere (a la Docker)</p> <p>So, we're not trying to replace spreadsheets, but rather, we consider that there's a need for alternative computation models and increasingly complex levels.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/actor-model.html#what-opportunities-does-this-create","title":"What opportunities does this create?","text":"<ul> <li>The actor model conceptually plays well with the Rete Algorithm, a classical design rules engine</li> <li>The actor model lends itself to both stateless and stateful paradigms. Digital twins are a possibility.</li> <li>The actor model lends itself to distributed computation.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/actor-model.html#what-risks-does-this-create","title":"What risks does this create","text":"<ul> <li>The world might not need or want more complicated ways of doing business rules.</li> <li>The costs and overheads of each autonomous actor and their messaging may incur performance hits that eventually undermine the overall value proposition.</li> <li>The actor model lends itself more to asynchronous business workflows mare than synchronous and latency critical ones.</li> <li>The actor model depends heavily on actor state and state management. OOP design patterns and principals are likely to be important.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html","title":"CQRS","text":"","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html#date","title":"Date","text":"<p>4 January 2023</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html#what-is-this-about","title":"What is this about?","text":"<p>This ADR captures some of the thinking around structuring API requests with the CQRS pattern.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html#what-characteristics-did-we-value-at-the-time","title":"What characteristics did we value at the time?","text":"<ul> <li>Controller logic was starting to get complex and getting harder to test, we wanted to test a slice of business logic independent of the web request context.</li> <li>Each business operation should clearly be categorized into a read operation that is potentially optimizable/cache-able or a write operation that is clearly mutating database state and therefore cache busting.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html#considerations","title":"Considerations","text":"<p>The MediatR library was considered for a more \"elegant\" query/command dispatch pattern. Reading at the time seemed to indicate some performance loss from MediatR and we didn't actually want the full blown Mediator Pattern.</p> <p>A more basic query/command dispatch pattern was implemented as a proof of concept, leveraging the built in dependency injection and assembly scanning. It worked, but seemed to hurt the overall legibility of endpoints invoking commands and queries.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html#what-did-we-decide-on","title":"What did we decide on?","text":"<p>A basic pattern of splitting logic into commands and queries, each inheriting from a standardized interface, and respectively leveraging a write or read optimized database context was decided on. This was implemented using the built in dotnet dependency injection framework.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html#what-opportunities-does-this-create","title":"What opportunities does this create?","text":"<ul> <li>Queries can have a caching layer easily introduced.</li> <li>Auditing concepts can be introduced in a transparent way on all write operations.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/cqrs.html#what-risks-did-this-introduce","title":"What risks did this introduce?","text":"<ul> <li>Commands calling other commands, or queries calling other queries may cause unwanted coupling in the long term. Need to be conscious of when the need to reduce duplicate code outweighs the need to keep commands and queries decoupled from each other.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html","title":"Expression Engine","text":"","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html#date","title":"Date","text":"<p>3 January 2023</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html#what-is-this-about","title":"What is this about?","text":"<p>For the engine we needed and expression parser and evaluator. It allows you to compute the value of string expressions such as <code>sqrt(a^2 + b^2)</code> at runtime with data driven parameters.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html#what-characteristics-did-we-value-at-the-time","title":"What characteristics did we value at the time?","text":"<p>We cared about the following characteristics most when choosing an expression parser for the engine:</p> <ul> <li>Extensibility - we need to be able to easily extend the expression parser with custom functions.</li> <li>Intuitiveness - it should be easy for a layman to write the expressions, alignment with common syntax (like Excel) would be a benefit.</li> <li>Should have all the common logical and mathematical operators out the box</li> <li>Must be able to evaluate a ternary operator (i.e. perform an if statement)</li> <li>Fast - we're going to be evaluating a lot of these expressions, it needs to be as fast as possible.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html#considerations","title":"Considerations","text":"<p>A number of expression parsing libraries were considered initially, of which it was narrowed down to a few candidates</p> <ul> <li>Flee</li> <li>NCalc</li> <li>Jint</li> <li>mXparser</li> <li>Eval Expression</li> <li>Moonsharp</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html#what-did-we-decide-on","title":"What did we decide on?","text":"<p>Starting with Flee to keep it simple to start with. Whilst not particularly popular, it's feature set matched the criteria the best for the proof of concept phase.</p> <p>We're also going to create a layer of abstraction over the parser so that we can swap it out, or extend it, in the future.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html#what-opportunities-does-this-create","title":"What opportunities does this create?","text":"<ul> <li>The expression parsers can be extended with Jint or Moonsharp for more features if needed in the future, such as JS or LUA functions.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/expression-engine.html#what-risks-did-this-introduce","title":"What risks did this introduce?","text":"<ul> <li>Flee isn't that popular, we might end up forking it and maintaining it internally</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html","title":"Multiple Database Providers","text":"","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html#date","title":"Date","text":"<p>18 March 2023</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html#what-is-this-about","title":"What is this about?","text":"<p>This ADR captures some of the thinking around the choice to support multiple databases in EngineBay.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html#what-characteristics-did-we-value-at-the-time","title":"What characteristics did we value at the time?","text":"<ul> <li>We cared about making EngineBay as compatible as reasonably possible with as many tech eco-systems as possible, improving interoperability.</li> <li>Whilst we care about the performance of EngineBay, we value flexibility and compatibility more in this context.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html#considerations","title":"Considerations","text":"<ul> <li>Entity Framework provides a fairly uniform experience for interacting with data, abstracting away the underlying data implementation (most of the time). With it's fairly board set of Data Providers, we could easily target many mainstream database technologies.</li> <li>Dapr was briefly considered.</li> <li>We didn't really consider any other ORM technologies at the time</li> <li>We assumed that most developers will be familiar with some from of relational database, and most real world deployments would likely use some kind of main stream relational database technology (postgres, mysql, sqlserver etc.).</li> <li>We also assumed that likelihood of adoption would increase if database administration was with a familiar technology.</li> <li>We know that ORM generated SQL is on average worse than hand-crafted SQL in performance sensitive scenarios.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html#what-did-we-decide-on","title":"What did we decide on?","text":"<p>Given the usage of .Net, we decided to lean into the usage of Entity Framework ORM to improve overall interoperability of EngineBay.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html#what-opportunities-does-this-create","title":"What opportunities does this create?","text":"<ul> <li>Database interoperability provides some interesting opportunities.</li> <li>We could have EngineBay running as an ephemeral service with no persistence whatsoever, using an in-memory db</li> <li>We could have EngineBay running as a light service with a simple file system based storage.</li> <li>We could have EngineBay being portable between traditional on-premise deployments and cloud native environments, e.g. Azure SQLDB or full blown managed SQL Server.</li> <li>We could have EngineBay use highly available services like CosmosDB or CockroachDB though it's compatibility layers.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/multiple-database-providers.html#what-risks-did-this-introduce","title":"What risks did this introduce?","text":"<ul> <li>Database specific performance optimizations, e.g. stored procedures, will be difficult to implement.</li> <li>We may end up performance optimizing for a recommended database to start with.</li> <li>We are reliant on the quality of SQL generated by the ORM.</li> <li>We won't be able to easily take advantage of specific database features.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html","title":"Plugin model","text":"","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html#date","title":"Date","text":"<p>17 March 2023</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html#what-is-this-about","title":"What is this about?","text":"<p>With the decision to take the project down the route of a Sponsorware model, to balance open sourcing desires with monetization and support needs, the code base needs to be re-structured to be a blend of open and closed source modules.</p> <p>Sponsorware is a release strategy for open-source software that enables developers to be compensated for their open-source work with fewer downsides than traditional open-source funding models.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html#what-characteristics-did-we-value-at-the-time","title":"What characteristics did we value at the time?","text":"<ul> <li>We cared deeply about keeping the project code base in a maintainable structure, regardless of whether it was open or closed source. We wanted to avoid human error in having to copy-paste content across repositories, or introduce regressions by managing multiple code bases.</li> <li>We wanted to avoid the complexity of sub-repos.</li> <li>We wanted to keep the project easy to host, both the community distributions and the sponsored distributions with enhanced feature sets.</li> <li>We wanted to be able to carefully manage change, knowing when things break, and when it's safe to upgrade.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html#considerations","title":"Considerations","text":"<p>Licensing of each module needs to be carefully considered. Whilst a copyleft or weak-copyleft is desireable, it would prevent the sponsorware model, so a more permissive license is required for open-source modules, such as MIT.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html#what-did-we-decide-on","title":"What did we decide on?","text":"<p>With the vision of a more plugin and pluggable architecture in mind, we decided to start refactoring sensible parts of the codebase into independent NuGet packages.</p> <p>To try keep modules as independent but meaningful \"vertical slices\" of functionality that can be composed into a greater system, we chose to follow some of the these project structure ideas along with .Net minimal APIs.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html#what-opportunities-does-this-create","title":"What opportunities does this create?","text":"<ul> <li>The plugin approach should open up the code base to the community, allowing contribution to open-sourced modules, as well as providing future community extension points to the core.</li> <li>NuGet covers the core need for .Net packages at the moment, but this can easily be extended to include NPM or other package managers as the project's functionality grows.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/plugin-model.html#what-risks-did-this-introduce","title":"What risks did this introduce?","text":"<ul> <li>Decomposing the codebase into a more modular and pluggable architecture is going to introduce some extra work from time-to-time to keep things decoupled. This may slow down new feature work or big changes at times.</li> <li>There will probably be contention sometime down the line where certain features may fall into a grey area on being open/closed source.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html","title":"Proto.actor","text":"","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html#date","title":"Date","text":"<p>4 January 2023</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html#what-is-this-about","title":"What is this about?","text":"<p>This ADR captures some of the thinking around basing this project on the actors model, implemented with proto.actor.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html#what-characteristics-did-we-value-at-the-time","title":"What characteristics did we value at the time?","text":"<ul> <li>Message interchange between actors needs to be fast</li> <li>Each actor should be in its own process/thread so that we can scale to really large models.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html#considerations","title":"Considerations","text":"<p>Akka.net was considered, and whilst it was mature, it was also quite opinionated, with a complex framework for actors. Initial attempts at a prototype stalled because of 'barrier to entry' of the framework</p> <p>A prototype of an actor model based engine was built in node js, with Comedy as the underlying actor model framework. Whilst we were able to get a flow of logical expressions evaluating, the cost of message serialization and startup overheads of web workers were apparent with even small models. Past experience with JavaScript expression evaluation, whilst amazingly flexible, was not so great from a performance perspective.</p> <p>Proto.actor on golang was considered. Golang has some extremely fast expression evaluation libraries, but the framework was pretty immature, documentation spotty, and changing all the time. Unfamiliarity with golang at the time was a bit of a deterrent, however, the appeal of grpc message interchange and \"seamless\" scaling of a actors across clusters was too much to resist.</p> <p>So, a prototype of proto.actor on dot net was built. It took a while to get a working flow of logical expressions to be evaluated. There was a lot of inferring how the framework worked from source code and commit reviews, and some nasty memory leaks to figure out. However, eventually a satisfactorily stable and encouragingly performant prototype was producing results.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html#what-did-we-decide-on","title":"What did we decide on?","text":"<p>Since proto.actor is a spiritual successor to Akka.net, used grpc for message communication between actors, and had a much simpler framework. It was selected as the underlying framework for actor control.</p>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html#what-opportunities-does-this-create","title":"What opportunities does this create?","text":"<ul> <li>Proto.actor has both a golang and .net runtime. There's are in theory interoperable through the strict protobuf message formats. If needed, performance optimized Astor's could run in a golang stack, whilst other parts in the .net stack. This gives us access to package libraries from both ecosystems if we need it one day.</li> <li>We learnt a lot about the actor model through the various failed prototypes, which in turn, informed subsequent architectural decisions.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"about/architecture-decision-records/proto-actor.html#what-risks-did-this-introduce","title":"What risks did this introduce?","text":"<ul> <li>With an unstable and immature library at the core of the architecture, we are in for a rough ride as it evolves.</li> </ul>","tags":["Architecture Decision Record"]},{"location":"documentation/concepts/index.html","title":"Concepts","text":""},{"location":"documentation/concepts/index.html#overview","title":"Overview","text":"<p>There are a few of concepts in EngineBay to get familiar with when modelling a domain. You can read up more about each concept in detail, however, the gist is:</p> <ul> <li>Everything is contained in a Workbook as a Blueprint.</li> <li>Blueprints contain Expressions, Data Variables, Data Tables, and Triggers.</li> <li>Expressions are functions with input and output Data Variables.</li> <li>Changes in the value of a Data Variable invokes Triggers.</li> </ul>"},{"location":"documentation/concepts/index.html#how-it-works","title":"How it works","text":"<p>When the engine runs, the all the Blueprints in a Workbook are compiled down into a graph of functions that can be invoked on input Data Variables to produce useful outputs.</p> <pre><code>graph LR\n    A --&gt; Expression1[\"f(A,B) =&gt; C\"]\n    B --&gt; Expression1\n    Expression1 --&gt; C\n    B --&gt; Expression2[\"f(B,C) =&gt; D\"]\n    C --&gt; Expression2\n    Expression2 --&gt; D\n</code></pre>"},{"location":"documentation/concepts/index.html#model","title":"Model","text":"<p>When drawn as an Entity Relationship Diagram it looks like this:</p> <pre><code>---\ntitle: Concept relationship diagram\n---\nerDiagram\n    Workbook ||--o{ Blueprint : \"\"\n    Blueprint ||--o{ \"Data variable\" : \"\"\n    Blueprint ||--o{ \"Data table\" : \"\"\n    Blueprint ||--o{ \"Expression\" : \"\"\n    Blueprint ||--o{ \"Trigger\" : \"\"\n</code></pre>"},{"location":"documentation/concepts/data-variables.html","title":"Data Variables","text":"<p>A Data Variable holds a single value.</p> <p>Data variables can be either an input or an output of an Expression.</p> <p>Note</p> <p>All data variables share a global namespace in a session, in other words, they must be uniquely named.</p>","tags":["Data Variables"]},{"location":"documentation/concepts/data-variables.html#types-of-data-variables","title":"Types of Data Variables","text":"<p>Data Variables can by of type:</p> <ul> <li>float</li> <li>string</li> <li>boolean</li> </ul>","tags":["Data Variables"]},{"location":"documentation/concepts/expressions.html","title":"Expressions","text":"","tags":["Expressions"]},{"location":"documentation/concepts/expressions.html#overview","title":"Overview","text":"<p>A logical or mathematical expression that can be evaluated in the engine.</p> Maths expressionsLogic expressions <pre><code>1 + 2 =&gt; 3\n</code></pre> <pre><code>10 &gt; 6 =&gt; true\n</code></pre>","tags":["Expressions"]},{"location":"documentation/concepts/expressions.html#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>Expressions are functional and can therefore depend on many input Data Variables, but only ever produce a single output variable:</p> <pre><code>A + B + 3 =&gt; C\n</code></pre> <pre><code>graph LR\n    A[A = 1] --&gt; Expression[\"A + B + 3 =&gt; C\"]\n    B[B = 2] --&gt; Expression\n    Expression --&gt; C[C = 6]\n</code></pre>","tags":["Expressions"]},{"location":"documentation/concepts/expressions.html#functions","title":"Functions","text":"<p>Expressions can invoke a number of built in Functions:</p> <pre><code>FromKilometersPerHour(KPH) * FromMinutes(Minutes) =&gt; Length\n</code></pre> <pre><code>graph LR\n    KPH[KPH = 80] --&gt; Expression[\"FromKilometersPerHour(KPH) * FromMinutes(Minutes) =&gt; Length\"]\n    Minutes[Minutes = 30] --&gt; Expression\n    Expression --&gt; Length[Length = 40000]\n</code></pre>","tags":["Expressions"]},{"location":"documentation/concepts/expressions.html#examples","title":"Examples","text":"Boolean Expressions <p>Perform complex logical operations:</p> <pre><code>(A = 100 OR B &gt; 0) AND C &lt;= 2 =&gt; D\n</code></pre> <pre><code>graph LR\n    A[A = 1] --&gt; Expression[\"(A = 100 OR B &gt; 0) AND C &lt;= 2 =&gt; D\"]\n    B[B = 2] --&gt; Expression\n    C[C = 1] --&gt; Expression\n    Expression --&gt; D[D = true]\n</code></pre> Maths Expressions <p>Perform maths!</p> <pre><code>A + B * (A - B) =&gt; C\n</code></pre> <pre><code>graph LR\n    A[A = 1] --&gt; Expression[\"A + B * (A - B) =&gt; C\"]\n    B[B = 2] --&gt; Expression\n    Expression --&gt; C[C = 1]\n</code></pre> Create a constant <p>Expressions don't have to have an input:</p> <pre><code>22 / 7 =&gt; PI\n</code></pre> <pre><code>graph LR\n    Expression[\"22 / 7 =&gt; PI\"]\n    Expression --&gt; PI[PI = 3.14159265359]\n</code></pre> Alias a data variable <p>Expressions can simply pass on a value to rename or alias a data variable:</p> <pre><code>A =&gt; B\n</code></pre> <pre><code>graph LR\n    A[A = 1] --&gt; Expression[\"A =&gt; B\"]\n    Expression --&gt; B[B = 1]\n</code></pre>","tags":["Expressions"]},{"location":"documentation/concepts/expressions.html#under-the-hood","title":"Under the hood","text":"<p>EngineBay's Expression parsing is based on Flee, a lightweight and extensible expression evaluator.</p> <p>To give it out the box functionality, it's been extended with the following libraries:</p> <ul> <li>Flee - for basic logical and mathematical operators</li> <li>UnitsNet - for units of measurement and conversion functionality</li> <li>EngineBay.SheetFunctions - for Excel-like functions</li> </ul> <p>You can find out more about this decision in the Expression Engine architecture decision record.</p>","tags":["Expressions"]},{"location":"documentation/concepts/triggers.html","title":"Triggers","text":"<p>A Trigger contains a set of Expressions that cumulatively evaluates to a boolean value stored in a single output Data Variable.</p>","tags":["Trigger"]},{"location":"documentation/concepts/triggers.html#trigger-tables","title":"Trigger Tables","text":"<p>Another way of thinking about Triggers is like a table, where each row in the table represents a trigger, and each cell in a row represents an Expression. All the cells must be <code>True</code> for the whole row to be <code>True</code>.</p> Trigger Name Data Variable A Data Variable B All numbers are positive A &gt; 0 B &gt; 0 All numbers are negative A &lt; 0 B &lt; 0 <p>If we have data variables with values <code>A=3</code> and <code>B=2</code>, our trigger table would evaluate as follows:</p> Trigger Name Data Variable A = 3 Data Variable B =2 Trigger evaluation All numbers are positive  A &gt; 0  B &gt; 0  True All numbers are negative  A &lt; 0  B &lt; 0  False <p>The <code>All numbers are positive</code> trigger has has been triggered!</p>","tags":["Trigger"]},{"location":"documentation/concepts/triggers.html#sparse-trigger-tables","title":"Sparse Trigger Tables","text":"<p>Furthermore, not every trigger has to define a condition for every data variable, a sparsely populated Trigger Tables represents this:</p> Trigger Name Data Variable A Data Variable B Data Variable C Data Variable D All numbers are positive B &gt; 0 B &gt; 0 C &gt; 0 D &gt; 0 At least one number is positive A &gt; 0 At least one number is positive B &gt; 0 At least one number is positive C &gt; 0 At least one number is positive D &gt; 0 All numbers are negative A &lt; 0 B &lt; 0 C &lt; 0 D &lt; 0 <p>If we have data variables with values <code>A=3</code>, <code>B=2</code>, <code>C=-1</code> and <code>D=-6</code>, our trigger table would evaluate as follows:</p> Trigger Name Data Variable A Data Variable B Data Variable C Data Variable D Trigger evaluation All numbers are positive  B &gt; 0  B &gt; 0  C &gt; 0  D &gt; 0  False At least one number is positive  A &gt; 0  True At least one number is positive  B &gt; 0  True At least one number is positive  C &gt; 0  False At least one number is positive  D &gt; 0  False All numbers are negative  A &lt; 0  B &lt; 0  C &lt; 0  D &lt; 0  False <p>The <code>At least one number is positive</code> trigger has has been triggered!</p>","tags":["Trigger"]},{"location":"documentation/concepts/workbooks.html","title":"Workbooks","text":"<p>Workbooks are simply a collection of Blueprints.</p> <p>A workbook effectively acts as a global namespace</p>","tags":["Workbooks"]},{"location":"documentation/concepts/blueprints/blueprints.html","title":"Blueprints","text":"<p>A Blueprint contains a set of Expression Blueprints and the Data Variable Blueprints that the they depend on.</p>","tags":["Blueprints"]},{"location":"documentation/concepts/blueprints/data-variable-blueprints.html","title":"Data Variable Blueprints","text":"<p>A blueprint for creating a Data Variable that can be evaluated in the engine.</p>","tags":["Blueprints","Data Variables","Data Variable Blueprints"]},{"location":"documentation/concepts/blueprints/expression-blueprints.html","title":"Expression Blueprints","text":"<p>A blueprint for creating a simple logical or mathematical Expressions that can be evaluated in the engine.</p>","tags":["Blueprints","Expressions Blueprint","Expressions"]},{"location":"documentation/concepts/blueprints/expression-blueprints.html#examples","title":"Examples","text":"<p>A = 3 B = 2 A + B =&gt; 5</p>","tags":["Blueprints","Expressions Blueprint","Expressions"]},{"location":"documentation/concepts/blueprints/trigger-blueprints.html","title":"Trigger Blueprints","text":"<p>A Trigger Blueprint contains a set of Trigger Expression Blueprints and a single output Data Variable Blueprints that it will update with the boolean value of the trigger's state (i.e. <code>True</code> or <code>False</code>).</p>","tags":["Blueprints","Trigger","Trigger Blueprint"]},{"location":"documentation/concepts/blueprints/trigger-expression-blueprints.html","title":"Trigger Expression Blueprints","text":"<p>A Trigger Blueprint contains an expression which should evaluate to <code>True</code> or <code>False</code> and a single input Data Variable Blueprint that the expression depends on.</p>","tags":["Blueprints","Trigger","Trigger Blueprint","Trigger Expression Blueprint"]},{"location":"documentation/concepts/blueprints/trigger-expression-blueprints.html#examples","title":"Examples","text":"<p>A &gt; 6 =&gt; true</p>","tags":["Blueprints","Trigger","Trigger Blueprint","Trigger Expression Blueprint"]},{"location":"documentation/concepts/functions/index.html","title":"Functions","text":""},{"location":"documentation/configuration/index.html","title":"Configuration","text":"<p>EngineBay is configured through Environment Variables.</p> <p>EngineBay is not intended to be pre-configured with any workbooks, blueprints etc. however, it is convenient for testing purposes to have a deterministic state. See the Seed Data for more details on how to insert data on startup.</p>","tags":["Configuration"]},{"location":"documentation/configuration/environment-variables.html","title":"Environment Variables","text":"<p>EngineBay takes the approach of configuring most behavior through environment variables.</p>","tags":["Configuration","Environment Variables"]},{"location":"documentation/configuration/environment-variables.html#database","title":"Database","text":"<p>The following environment variables control the database configuration and behavior of EngineBay.</p> Environment variable Default value Options Description <code>DATABASE_PROVIDER</code> <code>SQLite</code> <code>InMemory</code>, <code>SQLite</code>, <code>SqlServer</code>, <code>Postgres</code> The relational database provider to use. Defaults to SQLite when not set. <code>DATABASE_CONNECTION_STRING</code> <code>none</code> N/A The connection string to use for the configured <code>DATABASE_PROVIDER</code> <code>DATABASE_RESET</code> <code>false</code> <code>true</code>, <code>false</code>, <code>none</code> This will RESET the database, deleting all tables and re-applying database migrations. This is intended for development and testing activities where a deterministic database state is required. Is always <code>true</code> when <code>DATABASE_PROVIDER</code> is set to <code>InMemory</code> <code>DATABASE_RESEED</code> <code>false</code> <code>true</code>, <code>false</code>, <code>none</code> This will RESEED the database with initial data. This is intended for development and testing activities where a deterministic database state is required. <code>DATABASE_SEED_DATA_PATH</code> <code>/seed-data</code> <code>string</code>, <code>none</code> The directory to be used to look for seed data files. <code>DATABASE_EXIT_AFTER_MIGRATIONS</code> <code>false</code> <code>true</code>, <code>false</code>, <code>none</code> Force shutdown after migrations are completed. This is intended for use in simulating database migrations in CI environments. <code>DATABASE_EXIT_AFTER_SEEDING</code> <code>false</code> <code>true</code>, <code>false</code>, <code>none</code> Force shutdown after database (re)seeding is are completed. This is intended for use in simulating database migrations in CI environments. Only applies if <code>DATABASE_RESEED</code> is <code>true</code>","tags":["Configuration","Environment Variables"]},{"location":"documentation/configuration/environment-variables.html#data-protection","title":"Data Protection","text":"<p>The following environment variables control the data protection behavior of EngineBay.</p> Environment variable Default value Options Description <code>DATA_PROTECTION_KEY_STORE_PROVIDER</code> <code>FileSystem</code> <code>FileSystem</code>, <code>Redis</code> The key store provider for data protection encryption keys. Defaults to FileSystem when not set. <code>DATA_PROTECTION_NAMESPACE</code> <code>EngineBay DataProtection Key Store</code> <code>string</code>, <code>none</code> The partitioning namespace for the key store provider for data protection encryption keys. Defaults when not set. <code>DATA_PROTECTION_REDIS_CONNECTION_STRING</code> <code>none</code> <code>string</code>, <code>none</code> Connection string for Redis key store provider. <code>DATA_PROTECTION_KEY_LIFETIME_DAYS</code> <code>7</code> <code>number</code>, <code>none</code> The lifetime of an encryption key before it is rotated internally.","tags":["Configuration","Environment Variables"]},{"location":"documentation/configuration/environment-variables.html#logging","title":"Logging","text":"<p>The following environment variables control logging behavior of EngineBay.</p> Environment variable Default value Options Description <code>LOGGING_LEVEL</code> <code>Warning</code> <code>Critical</code>, <code>Error</code>, <code>Warning</code>, <code>Information</code> <code>Debug</code>, <code>Trace</code>, <code>None</code> Sets the logging level of EngineBay. <code>LOGGING_SENSITIVE_DATA_ENABLED</code> <code>none</code> <code>true</code>, <code>false</code>, <code>none</code> Allows for logging of potentially sensitive data, for example, the contents of a database transaction. This is intended for development and troubleshooting and is not recommended for production use.","tags":["Configuration","Environment Variables"]},{"location":"documentation/configuration/environment-variables.html#authentication","title":"Authentication","text":"<p>The following environment variables control the authentication behavior of EngineBay.</p> Environment variable Default value Options Description <code>AUTHENTICATION_SECRET</code> <code>none</code> <code>string</code> The secret used for verifying JWT Bearer tokens <code>AUTHENTICATION_ISSUER</code> <code>http://localhost:5050</code> <code>string</code>, <code>none</code> The value used for verifying JWT Audience (aud) claims <code>AUTHENTICATION_AUDIENCE</code> <code>http://localhost:5050</code> <code>string</code>, <code>none</code> The value used for verifying JWT Issuer (iss) claims <code>AUTHENTICATION_AUTHORITY</code> <code>none</code> <code>string</code>, <code>none</code> The value used for verifying JWT Authority claims <code>AUTHENTICATION_ALGORITHM</code> <code>HS256</code> <code>HS256</code>, <code>HS512</code> The algorithm used for verifying JWT tokens <code>AUTHENTICATION_METHOD</code> <code>JwtBearer</code> <code>JwtBearer</code>, <code>Basic</code>, <code>None</code> The authentication method used. <code>Basic</code>, <code>None</code> are not recommended as these are intended for troubleshooting and testing, not production use. <code>AUTHENTICATION_VALIDATE_EXPIRY</code> <code>true</code> <code>true</code>, <code>false</code>, <code>none</code> Enabled JWT Expiry (exp) validation. Disabling this is not recommended. <code>AUTHENTICATION_VALIDATE_AUDIENCE</code> <code>true</code> <code>true</code>, <code>false</code>, <code>none</code> Enabled JWT Audience (aud) validation. Disabling this is not recommended. <code>AUTHENTICATION_VALIDATE_ISSUER</code> <code>true</code> <code>true</code>, <code>false</code>, <code>none</code> Enabled JWT Issuer (iss) validation. Disabling this is not recommended. <code>AUTHENTICATION_VALIDATE_ISSUER_SIGNING_KEY</code> <code>true</code> <code>true</code>, <code>false</code>, <code>none</code> Enabled JWT Issuer signing keys validation. Disabling this is not recommended. <code>AUTHENTICATION_VALIDATE_SIGNED_TOKENS</code> <code>true</code> <code>true</code>, <code>false</code>, <code>none</code> Enabled JWT signed tokens validation. Disabling this is not recommended.","tags":["Configuration","Environment Variables"]},{"location":"documentation/configuration/environment-variables.html#api-documentation","title":"API Documentation","text":"<p>The following environment variables control the OpenAPI 3.0 api documentation behavior of EngineBay.</p> Environment variable Default value Options Description <code>API_DOCUMENTATION_ENABLED</code> <code>false</code> <code>true</code>, <code>false</code>, <code>none</code> Enables OpenApi 3.0 API documentation on paths <code>/swagger/v1/swagger.json</code> and <code>/swagger/index.html</code>.","tags":["Configuration","Environment Variables"]},{"location":"documentation/configuration/environment-variables.html#auditing","title":"Auditing","text":"<p>The following environment variables control the auditing behavior of EngineBay.</p> Environment variable Default value Options Description <code>AUDITING_ENABLED</code> <code>true</code> <code>true</code>, <code>false</code>, <code>none</code> This can disable tracking and auditing of changes saved to the database. It is not recommended to disable this unless EngineBay is processing PII data. Disabling auditing can provide a slight performance boost if traceability is not required.","tags":["Configuration","Environment Variables"]},{"location":"documentation/configuration/seed-data.html","title":"Seed Data","text":"<p>EngineBay is not intended to be pre-configured with any data (workbooks, blueprints etc.). However, it is convenient for testing purposes to have EngineBay in a repeatable and deterministic state.</p> <p>The Database Environment Variables provide functionality to create, reset, or re-seed the database on startup.</p> <p>Warning</p> <p>Data seeding is a dangerous operation in that it destroys the existing database. It is not recommended for production.</p>","tags":["Configuration","Seed Data"]},{"location":"documentation/configuration/seed-data.html#workbook-json-files","title":"Workbook JSON Files","text":"<p>JSON files with the <code>*.workbooks.json</code> extension located in the <code>/seed-data</code> directory in EngineBay's container will be validated and inserted into the database on startup.</p> <p>The <code>/seed-data</code> directory is configurable through the environment variable <code>DATABASE_SEED_DATA_PATH</code>.</p> <p>Workbooks inserted during startup are owned by the System User.</p>","tags":["Configuration","Seed Data"]},{"location":"documentation/modules/index.html","title":"Modules","text":""},{"location":"documentation/modules/index.html#overview","title":"Overview","text":"<p>EngineBay has a number of open source modules, varying in size and complexity:</p> <ul> <li>EngineBay.ActorEngine</li> <li>EngineBay.AdminPortal</li> <li>EngineBay.ApiDocumentation</li> <li>EngineBay.Authentication</li> <li>EngineBay.Blueprints</li> <li>EngineBay.Core</li> <li>EngineBay.Cors</li> <li>EngineBay.DataProtection</li> <li>EngineBay.DatabaseManagement</li> <li>EngineBay.DocumentationPortal</li> <li>EngineBay.Logging</li> <li>EngineBay.Persistence</li> <li>EngineBay.SheetFunctions</li> <li>EngineBay.Telemetry</li> </ul>"},{"location":"documentation/modules/index.html#templates","title":"Templates","text":"<p>Additionally, there is a Module Template and a Demo Module to facilitate development of new modules.</p>"},{"location":"documentation/modules/index.html#quality-matrix","title":"Quality Matrix","text":"<p>To help use keep on top of the quality and maintenance of these modules, we're tracking the following Quality Matrix:</p> Module Artefact Maintainability Test Coverage EngineBay.ActorEngine EngineBay.AdminPortal EngineBay.ApiDocumentation EngineBay.Authentication EngineBay.Blueprints EngineBay.Core EngineBay.Cors EngineBay.DataProtection EngineBay.DatabaseManagement EngineBay.DocumentationPortal EngineBay.Logging EngineBay.Persistence EngineBay.SheetFunctions EngineBay.Telemetry EngineBay.ModuleTemplate N/A EngineBay.DemoModule N/A"},{"location":"documentation/modules/actor-engine.html","title":"Actor Engine","text":""},{"location":"documentation/modules/actor-engine.html#overview","title":"Overview","text":"<p>The EngineBay.ActorEngine provides the runtime for converting the Blueprints in a Workbook into an executable function. This is the core of the rules and calculations engine based on the Actor Model.</p> <p>Under the hood, it leverages the Proto.Actor .Net framework. You can find out more about this in the Actor Model and Proto.actor architecture decision records.</p>"},{"location":"documentation/modules/admin-portal.html","title":"Admin Portal","text":""},{"location":"documentation/modules/admin-portal.html#overview","title":"Overview","text":"<p>The EngineBay.AdminPortal provides the front end Administration Portal for Engine Bay.</p> <p>Under the hood, it's build on React and React Admin</p>"},{"location":"documentation/modules/api-documentation.html","title":"API Documentation","text":""},{"location":"documentation/modules/api-documentation.html#overview","title":"Overview","text":"<p>The EngineBay.ApiDocumentation provides all middleware to generate and expose OpenAPI v3 specifications of EngineBay's running modules.</p> <p>See the API Documentation Configuration for more details.</p>"},{"location":"documentation/modules/authentication.html","title":"Authentication","text":""},{"location":"documentation/modules/authentication.html#overview","title":"Overview","text":"<p>The EngineBay.Authentication provides all middleware for authorization and access control.</p> <p>See the Authentication Configuration for more details.</p>"},{"location":"documentation/modules/blueprints.html","title":"Blueprints","text":""},{"location":"documentation/modules/blueprints.html#overview","title":"Overview","text":"<p>The EngineBay.Blueprints provides all the Create, Read, Update, Delete (CRUD) functionality for all the concepts in a Workbook.</p>"},{"location":"documentation/modules/core.html","title":"Core","text":""},{"location":"documentation/modules/core.html#overview","title":"Overview","text":"<p>The EngineBay.Core contains common logic and interfaces shared by all other modules.</p> <p>It's not often used in isolation.</p>"},{"location":"documentation/modules/cors.html","title":"CORS","text":""},{"location":"documentation/modules/cors.html#overview","title":"Overview","text":"<p>The EngineBay.Cors provides middleware for configuring CORS on an API.</p>"},{"location":"documentation/modules/data-protection.html","title":"Data Protection","text":""},{"location":"documentation/modules/data-protection.html#overview","title":"Overview","text":"<p>The EngineBay.DataProtection provides a mechanism for encrypting security-sensitive data at rest whilst stored in the database.</p> <p>This module is based on the ASP.NET Core Data Protection APIs.</p> <p>Encryption keys are stored separately from encrypted data, with multiple key store providers. Keys are automatically rotated on a configurable regular basis. See the Data Protection Configuration for more details.</p> <p>Danger</p> <p>Whilst this module provides easy implementations of encryption at rest. It cannot backup your keystore. If you lose the keys, or they become corrupted, you may lose encrypted data.</p> <p>We highly recommend you use a production ready keystore with a secure backup strategy.</p> <p>Practice your disaster recovery process.</p>"},{"location":"documentation/modules/database-management.html","title":"Database Management","text":""},{"location":"documentation/modules/database-management.html#overview","title":"Overview","text":"<p>The EngineBay.DatabaseManagement provides database change management over time through code first migrations.</p> <p>See the Database Configuration for more details on configuring how and when migrations are applied.</p> <p>Danger</p> <p>Whilst this module provides easier change management, it cannot guarantee successful migrations in all scenarios.</p> <p>Practice your disaster recovery process.</p>"},{"location":"documentation/modules/demo-module.html","title":"Demo Module","text":""},{"location":"documentation/modules/documentation-portal.html","title":"Documentation Portal","text":""},{"location":"documentation/modules/documentation-portal.html#overview","title":"Overview","text":"<p>The EngineBay.DocumentationPortal provides the documentation you're reading right now.</p> <p>Under the hood, it's built on MkDocs and Material for MkDocs</p>"},{"location":"documentation/modules/logging.html","title":"Logging","text":""},{"location":"documentation/modules/logging.html#overview","title":"Overview","text":"<p>The EngineBay.Logging provides a consistence logging framework for all other EngineBay modules.</p> <p>See the Logging Configuration for more details.</p>"},{"location":"documentation/modules/module-template.html","title":"Module Template","text":""},{"location":"documentation/modules/persistence.html","title":"Persistence","text":""},{"location":"documentation/modules/persistence.html#overview","title":"Overview","text":"<p>The EngineBay.Persistence provides the common mechanisms for reading and writing data to multiple relational database storage providers.</p> <p>The underlying implementation is based on Entity Framework Core. You can find out more about this in the Multiple Database Providers and CQRS architecture decision records.</p> <p>See the Database Configuration for more details on configuring the database provider of your choice.</p>"},{"location":"documentation/modules/sheet-functions.html","title":"Sheet Functions","text":""},{"location":"documentation/modules/sheet-functions.html#overview","title":"Overview","text":"<p>The EngineBay.SheetFunctions provides a collection of static functions for extending EngineBay's expression engine with Excel-like functionality, e.g SUM, AVERAGE, VLOOKUP etc.</p>"},{"location":"documentation/modules/telemetary.html","title":"Telemetry","text":""},{"location":"documentation/modules/telemetary.html#overview","title":"Overview","text":"<p>The EngineBay.Telemetry provides all middleware to expose EngineBay telemetry and metrics sources, building on the Open Telemetry ecosystem.</p>"},{"location":"features/index.html","title":"Features","text":"<ul> <li>Multiple database providers</li> <li>Postgres</li> <li>SQLServer</li> <li>SQLite</li> <li>InMemory</li> <li>REST API for managing configuration</li> <li>Auditing</li> </ul>"},{"location":"tags.html","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags.html#about","title":"About","text":"<ul> <li>About</li> </ul>"},{"location":"tags.html#architecture-decision-record","title":"Architecture Decision Record","text":"<ul> <li>Actor model</li> <li>CQRS</li> <li>Expression Engine</li> <li>Multiple Database Providers</li> <li>Plugin model</li> <li>Proto.actor</li> </ul>"},{"location":"tags.html#blueprints","title":"Blueprints","text":"<ul> <li>Blueprints</li> <li>Data Variable Blueprints</li> <li>Expression Blueprints</li> <li>Trigger Blueprints</li> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#configuration","title":"Configuration","text":"<ul> <li>Configuration</li> <li>Environment Variables</li> <li>Seed Data</li> </ul>"},{"location":"tags.html#data-variable-blueprints","title":"Data Variable Blueprints","text":"<ul> <li>Data Variable Blueprints</li> </ul>"},{"location":"tags.html#data-variables","title":"Data Variables","text":"<ul> <li>Data Variables</li> <li>Data Variable Blueprints</li> </ul>"},{"location":"tags.html#environment-variables","title":"Environment Variables","text":"<ul> <li>Environment Variables</li> </ul>"},{"location":"tags.html#expressions","title":"Expressions","text":"<ul> <li>Expressions</li> <li>Expression Blueprints</li> </ul>"},{"location":"tags.html#expressions-blueprint","title":"Expressions Blueprint","text":"<ul> <li>Expression Blueprints</li> </ul>"},{"location":"tags.html#features","title":"Features","text":"<ul> <li>Roadmap</li> </ul>"},{"location":"tags.html#roadmap","title":"Roadmap","text":"<ul> <li>Roadmap</li> </ul>"},{"location":"tags.html#seed-data","title":"Seed Data","text":"<ul> <li>Seed Data</li> </ul>"},{"location":"tags.html#trigger","title":"Trigger","text":"<ul> <li>Triggers</li> <li>Trigger Blueprints</li> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#trigger-blueprint","title":"Trigger Blueprint","text":"<ul> <li>Trigger Blueprints</li> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#trigger-expression-blueprint","title":"Trigger Expression Blueprint","text":"<ul> <li>Trigger Expression Blueprints</li> </ul>"},{"location":"tags.html#workbooks","title":"Workbooks","text":"<ul> <li>Workbooks</li> </ul>"}]}